#BlueJ class context
comment0.target=LinkedBinaryTree
comment1.params=
comment1.target=LinkedBinaryTree()
comment10.params=
comment10.target=java.util.Iterator\ iterator()
comment11.params=
comment11.target=LinkedBinaryTree\ getRight()
comment12.params=target
comment12.target=boolean\ contains(java.lang.Object)
comment13.params=
comment13.target=boolean\ isEmpty()
comment14.params=
comment14.target=java.lang.String\ toString()
comment15.params=
comment15.target=java.util.Iterator\ preorder()
comment16.params=
comment16.target=java.util.Iterator\ postorder()
comment17.params=
comment17.target=boolean\ isComplete()
comment17.text=\n\ added\ by\ me\n\ isCompleted\ tests\ if\ the\ tree\ is\ a\ completed\ tree.\ If\ it\ is\ full\ or\ full\ to\ the\ next\ \n\ to\ last\ level\ with\ all\ the\ leaves\ on\ the\ bottom\ level\ and\ on\ the\ left\ side\ of\ the\ tree\n\ \n\ @return\ boolean\ -\ true\ if\ tree\ is\ complete\n
comment18.params=target
comment18.target=java.util.LinkedList\ getAncestors(java.lang.Object)
comment18.text=\n\ getAncestors\ returns\ a\ LinkedList\ of\ ancestors\ of\ target\ node.\ Traverses\ tree\ in\ a\ \n\ recursive\ fashion.\n\ \n\ @param\ T\ target\ -\ target\ element\ referenced\ by\ node\ in\ graph\n\ @return\ LinkedList<T>\ -\ Linked\ List\ of\ nodes\ leading\ to\ node\ that\ holds\ the\ target\ element.\n
comment2.params=element
comment2.target=LinkedBinaryTree(java.lang.Object)
comment3.params=element\ left\ right
comment3.target=LinkedBinaryTree(java.lang.Object,\ LinkedBinaryTree,\ LinkedBinaryTree)
comment4.params=
comment4.target=java.lang.Object\ getRootElement()
comment5.params=
comment5.target=LinkedBinaryTree\ getLeft()
comment6.params=target
comment6.target=java.lang.Object\ find(java.lang.Object)
comment7.params=
comment7.target=int\ size()
comment8.params=
comment8.target=java.util.Iterator\ inorder()
comment9.params=
comment9.target=java.util.Iterator\ levelorder()
numComments=19
